import sqlite3
from datetime import datetime

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect("tasksForDoLater.db", check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á, –µ—Å–ª–∏ –µ—ë –µ—â–µ –Ω–µ—Ç
cursor.execute('''
    CREATE TABLE IF NOT EXISTS tasks (
        user_id INTEGER,
        task_id INTEGER PRIMARY KEY AUTOINCREMENT,
        task_name TEXT,
        difficulty INTEGER,
        reminder_date TEXT
    )
''')
conn.commit()

user_data = {}

def startLater(message, bot, types):
    if message.text == "üìù –ó–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫":
        bot.send_message(message.chat.id, "–•–æ—Ä–æ—à–æ, —Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–¥–∞—Ç—å?", reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, howManyTaskShouldAddLater, bot, types)
    elif message.text == "üìà –ò–∑–º–µ–Ω–∏—Ç—å —É–∂–µ –≥–æ—Ç–æ–≤—ã–π":
        showAllTaskLists(message, bot, types)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
def howManyTaskShouldAddLater(message, bot, types):
    try:
        task_count = int(message.text)
        if 1 <= task_count <= 20:
            user_data[message.chat.id] = {"task_count": task_count, "tasks": []}
            addTaskLater(message, bot, types)
        else:
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 20.")
            bot.register_next_step_handler(message, howManyTaskShouldAddLater, bot, types)
    except ValueError:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        bot.register_next_step_handler(message, howManyTaskShouldAddLater, bot, types)

def addTaskLater(message, bot, types):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
    bot.register_next_step_handler(message, getTaskName, bot, types)

def getTaskName(message, bot, types):
    task_name = message.text
    user_data[message.chat.id]["tasks"].append({"name": task_name})
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button1 = types.KeyboardButton("1üëº")
    button2 = types.KeyboardButton("2üôÇ")
    button3 = types.KeyboardButton("3üò¢")
    markup.add(button1, button2, button3)
    
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á–∏:", reply_markup=markup)
    bot.register_next_step_handler(message, getTaskDifficulty, bot, types)

def getTaskDifficulty(message, bot, types):
    difficulty_map = {"1üëº": 1, "2üôÇ": 2, "3üò¢": 3}
    difficulty = difficulty_map.get(message.text)
    
    if difficulty is not None:
        user_data[message.chat.id]["tasks"][-1]["difficulty"] = difficulty
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2024-11-10 14:00):", reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, getReminderDate, bot, types)
    else:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å–ª–æ–∂–Ω–æ—Å—Ç—å.")
        bot.register_next_step_handler(message, getTaskDifficulty, bot, types)

def getReminderDate(message, bot, types):
    try:
        reminder_date = datetime.strptime(message.text, "%Y-%m-%d %H:%M")
        task = user_data[message.chat.id]["tasks"][-1]
        task["reminder_date"] = reminder_date.strftime("%Y-%m-%d %H:%M")
        
        cursor.execute('''
            INSERT INTO tasks (user_id, task_name, difficulty, reminder_date)
            VALUES (?, ?, ?, ?)
        ''', (message.chat.id, task["name"], task["difficulty"], task["reminder_date"]))
        conn.commit()
        
        bot.send_message(message.chat.id, f"–ó–∞–¥–∞—á–∞ '{task['name']}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        
        if len(user_data[message.chat.id]["tasks"]) < user_data[message.chat.id]["task_count"]:
            addTaskLater(message, bot, types)
        else:
            bot.send_message(message.chat.id, "–í—Å–µ –∑–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–¥–∞–Ω—ã.")
            user_data.pop(message.chat.id)
    except ValueError:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.")
        bot.register_next_step_handler(message, getReminderDate, bot, types)

# –ü—Ä–æ—Å–º–æ—Ç—Ä –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–¥–∞—á
def showAllTaskLists(message, bot, types):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—Å–µ —Å–ø–∏—Å–∫–∏ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    cursor.execute("SELECT DISTINCT task_name FROM tasks WHERE user_id = ?", (message.chat.id,))
    user_tasks = cursor.fetchall()
    
    if not user_tasks:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.")
        return

    bot.send_message(message.chat.id, "–í–∞—à–∏ —Å–ø–∏—Å–∫–∏ –∑–∞–¥–∞—á:")
    
    for idx, task in enumerate(user_tasks, start=1):
        bot.send_message(message.chat.id, f"–°–ø–∏—Å–æ–∫ {idx} - {task[0]}")
        showTasksInList(message, bot, types, task[0])

def showTasksInList(message, bot, types, list_name):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–¥–∞—á –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞."""
    cursor.execute("SELECT task_id, task_name, difficulty, reminder_date FROM tasks WHERE user_id = ? AND task_name = ?", (message.chat.id, list_name))
    tasks = cursor.fetchall()
    
    response = f"–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á '{list_name}':\n\n"
    for task in tasks:
        response += (f"ID: {task[0]}\n–ù–∞–∑–≤–∞–Ω–∏–µ: {task[1]}\n"
                     f"–°–ª–æ–∂–Ω–æ—Å—Ç—å: {task[2]}\n–î–∞—Ç–∞: {task[3]}\n"
                     "–ö–æ–º–∞–Ω–¥—ã:\n"
                     f"/edit_{task[0]} - –ò–∑–º–µ–Ω–∏—Ç—å\n"
                     f"/delete_{task[0]} - –£–¥–∞–ª–∏—Ç—å\n\n")
    bot.send_message(message.chat.id, response)

def editTask(message, bot, types):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –ø–æ –µ—ë ID."""
    try:
        task_id = int(message.text.split("_")[1])
        user_data[message.chat.id] = {"edit_task_id": task_id}
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
        bot.register_next_step_handler(message, updateTaskName, bot, types)
    except (IndexError, ValueError):
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–¥–∞—á–∏.")

def updateTaskName(message, bot, types):
    task_id = user_data[message.chat.id]["edit_task_id"]
    new_name = message.text
    cursor.execute("UPDATE tasks SET task_name = ? WHERE task_id = ?", (new_name, task_id))
    conn.commit()
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button1 = types.KeyboardButton("1üëº")
    button2 = types.KeyboardButton("2üôÇ")
    button3 = types.KeyboardButton("3üò¢")
    markup.add(button1, button2, button3)
    
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á–∏:", reply_markup=markup)
    bot.register_next_step_handler(message, updateTaskDifficulty, bot, types)

def updateTaskDifficulty(message, bot, types):
    task_id = user_data[message.chat.id]["edit_task_id"]
    difficulty_map = {"1üëº": 1, "2üôÇ": 2, "3üò¢": 3}
    difficulty = difficulty_map.get(message.text)
    
    if difficulty is not None:
        cursor.execute("UPDATE tasks SET difficulty = ? WHERE task_id = ?", (difficulty, task_id))
        conn.commit()
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2024-11-10 14:00):", reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, updateTaskDate, bot, types)
    else:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å–ª–æ–∂–Ω–æ—Å—Ç—å.")
        bot.register_next_step_handler(message, updateTaskDifficulty, bot, types)

def updateTaskDate(message, bot, types):
    try:
        task_id = user_data[message.chat.id]["edit_task_id"]
        reminder_date = datetime.strptime(message.text, "%Y-%m-%d %H:%M")
        
        cursor.execute("UPDATE tasks SET reminder_date = ? WHERE task_id = ?", (reminder_date.strftime("%Y-%m-%d %H:%M"), task_id))
        conn.commit()
        bot.send_message(message.chat.id, "–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
        user_data.pop(message.chat.id)
    except ValueError:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.")
        bot.register_next_step_handler(message, updateTaskDate, bot, types)

def deleteTask(message, bot):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ –µ—ë ID."""
    try:
        task_id = int(message.text.split("_")[1])
        cursor.execute("DELETE FROM tasks WHERE task_id = ?", (task_id,))
        conn.commit()
        bot.send_message(message.chat.id, "–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
    except (IndexError, ValueError):
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–¥–∞—á–∏.")
