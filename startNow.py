import time
import sqlite3
from datetime import datetime

user_tasks = {}

def create_db():
    conn = sqlite3.connect('tasks.db') 
    cursor = conn.cursor()

    cursor.execute('''
    CREATE TABLE IF NOT EXISTS completed_tasks (
        task_name TEXT,
        difficulty INTEGER,
        time INTEGER,
        completion_time TEXT
    )
    ''')

    conn.commit() 
    conn.close()  
    
def log_completed_task(task_name, difficulty, time):
    conn = sqlite3.connect('tasks.db')
    cursor = conn.cursor()

    completion_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

    cursor.execute('''
    INSERT INTO completed_tasks (task_name, difficulty, time, completion_time)
    VALUES (?, ?, ?, ?)
    ''', (task_name, difficulty, time, completion_time))

    conn.commit() 
    conn.close()  

def isUserDoHisTask(message, bot, index, types):
    if message.text == "‚úÖ –î–∞":
        bot.send_message(message.chat.id, f"–û—Ç–ª–∏—á–Ω–æ, –∑–∞–¥–∞—á–∞ {index} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        startNextTask(message, bot, index, types) 
    else:
        bot.send_message(message.chat.id, "–ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Å—è, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
        startDoTask(message, bot, types) 

def startNextTask(message, bot, current_index, types):
    user_id = message.chat.id
    tasks = user_tasks[user_id]
    if current_index < len(tasks): 
        index = current_index + 1
        task, details = list(tasks.items())[current_index]  
        difficulty = details["difficulty"]
        time_to_complete = details["time"]

        bot.send_message(message.chat.id, f"–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–¥–∞—á—É {index}: {task}. –£–¥–∞—á–∏ –≤–∞–º –≤ —É—Å–µ—Ä–¥–Ω–æ–π —Ä–∞–±–æ—Ç–µ!", reply_markup=types.ReplyKeyboardRemove())
        bot.send_message(message.chat.id, f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {time_to_complete} –º–∏–Ω—É—Ç.")
        time.sleep(time_to_complete * 60)

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        no_button = types.KeyboardButton("‚ùå –ù–µ—Ç")
        yes_button = types.KeyboardButton("‚úÖ –î–∞")
        markup.add(yes_button, no_button)

        bot.send_message(message.chat.id, f"–í—Ä–µ–º—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –∏—Å—Ç–µ–∫–ª–æ. –í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏?", reply_markup=markup)
        bot.register_next_step_handler(message, isUserDoHisTask, bot, index, types)  # –ü–µ—Ä–µ–¥–∞–µ–º types
    else:
        from logic import startWork
        markup = startWork(types)
        bot.send_message(message.chat.id, "–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤—Å–µ –∑–∞–¥–∞—á–∏! –ú–æ–ª–æ–¥–µ—Ü!", reply_markup=markup)

def startDoTask(message, bot, types):
    user_id = message.chat.id
    if user_id not in user_tasks or not user_tasks[user_id]:
        bot.send_message(message.chat.id, "–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.")
        return

    tasks = user_tasks[user_id]
    index = 0
    task, details = list(tasks.items())[index] 
    difficulty = details["difficulty"]
    time_to_complete = details["time"]

    bot.send_message(message.chat.id, f"–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–¥–∞—á—É {index + 1}: {task}. –£–¥–∞—á–∏ –≤–∞–º –≤ —É—Å–µ—Ä–¥–Ω–æ–π —Ä–∞–±–æ—Ç–µ!", reply_markup=types.ReplyKeyboardRemove())
    bot.send_message(message.chat.id, f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {time_to_complete} –º–∏–Ω—É—Ç.")
    time.sleep(time_to_complete * 60)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    no_button = types.KeyboardButton("‚ùå –ù–µ—Ç")
    yes_button = types.KeyboardButton("‚úÖ –î–∞")
    markup.add(yes_button, no_button)

    bot.send_message(message.chat.id, f"–í—Ä–µ–º—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –∏—Å—Ç–µ–∫–ª–æ. –í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏?", reply_markup=markup)
    bot.register_next_step_handler(message, isUserDoHisTask, bot, index + 1, types)  

def addTaskNow(message, bot, task_count, types, current_task_number=1):
    user_id = message.chat.id
    if user_id not in user_tasks:
        user_tasks[user_id] = {}

    if current_task_number > task_count:
        bot.send_message(message.chat.id, "–í—Å–µ –∑–∞–¥–∞—á–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã!")
        displayTasks(message, bot, types)
        return

    bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É {current_task_number} –∏–∑ {task_count}:", reply_markup=types.ReplyKeyboardRemove())
    
    bot.register_next_step_handler(message, getTaskDetails, bot, task_count, types, current_task_number)

def getTaskDetails(message, bot, task_count, types, current_task_number):
    user_id = message.chat.id
    task = message.text
    if user_id not in user_tasks:
        user_tasks[user_id] = {}
    user_tasks[user_id][task] = {"difficulty": None, "time": None} 

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button1 = types.KeyboardButton("1üëº")  
    button2 = types.KeyboardButton("2üôÇ")    
    button3 = types.KeyboardButton("3üò¢")    
    markup.add(button1, button2, button3)

    bot.send_message(message.chat.id, "–û—Ü–µ–Ω–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á–∏:", reply_markup=markup)
    bot.register_next_step_handler(message, setTaskDifficulty, bot, task, task_count, types, current_task_number)

def setTaskDifficulty(message, bot, task, task_count, types, current_task_number):
    user_id = message.chat.id
    try:
        difficulty = int(message.text[0])  
        if difficulty in [1, 2, 3]:
            user_tasks[user_id][task]["difficulty"] = difficulty
            
            bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ (–≤ –º–∏–Ω—É—Ç–∞—Ö): {current_task_number} –∏–∑ {task_count}:", reply_markup=types.ReplyKeyboardRemove())
            
            bot.register_next_step_handler(message, setTaskTime, bot, task, task_count, types, current_task_number)
        else:
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –æ—Ü–µ–Ω–∫—É —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ (1, 2 –∏–ª–∏ 3).")
            setTaskDifficulty(message, bot, task, task_count, types, current_task_number)
    except ValueError:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        setTaskDifficulty(message, bot, task, task_count, types, current_task_number)

def setTaskTime(message, bot, task, task_count, types, current_task_number):
    user_id = message.chat.id
    try:
        time = int(message.text)
        if time >= 0:
            user_tasks[user_id][task]["time"] = time
            
            current_task_number += 1
            addTaskNow(message, bot, task_count, types, current_task_number) 
        else:
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –≤—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.")
            setTaskTime(message, bot, task, task_count, types, current_task_number)
    except ValueError:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        setTaskTime(message, bot, task, task_count, types, current_task_number)

def displayTasks(message, bot, types):
    user_id = message.chat.id
    if user_id not in user_tasks or not user_tasks[user_id]:
        bot.send_message(message.chat.id, "–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.")
        return
    
    for index, (task, details) in enumerate(user_tasks[user_id].items(), start=1):
        bot.send_message(message.chat.id, f"–ó–∞–¥–∞—á–∞ {index}: {task}, –°–ª–æ–∂–Ω–æ—Å—Ç—å: {details['difficulty']}, –í—Ä–µ–º—è: {details['time']} –º–∏–Ω—É—Ç")
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    edit_button = types.KeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
    delete_button = types.KeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É")
    ok_button = types.KeyboardButton("‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ")
    markup.add(ok_button)
    markup.add(edit_button)
    markup.add(delete_button)
    bot.send_message(message.chat.id, "–•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É?", reply_markup=markup)
    
    bot.register_next_step_handler(message, handleEditOrDelete, bot, types)

def handleEditOrDelete(message, bot, types):
    user_id = message.chat.id
    if user_id not in user_tasks or not user_tasks[user_id]:
        bot.send_message(message.chat.id, "–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.")
        return

    if message.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ":
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:")
        bot.register_next_step_handler(message, editTask, bot, types)
    elif message.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É":
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:")
        bot.register_next_step_handler(message, deleteTask, bot, types)
    elif message.text == "‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ":
        bot.send_message(message.chat.id, "–•–æ—Ä–æ—à–æ, —Ç–æ–≥–¥–∞ –¥–∞–≤–∞–π—Ç–µ –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é")
        startDoTask(message, bot, types)
    else:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
        displayTasks(message, bot, types)

def editTask(message, bot, types):
    user_id = message.chat.id
    try:
        task_number = int(message.text) - 1
        task_keys = list(user_tasks[user_id].keys())
        if 0 <= task_number < len(task_keys):
            task = task_keys[task_number]
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            edit_name = types.KeyboardButton("‚úèÔ∏è –ò—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ")
            edit_time = types.KeyboardButton("‚è∞ –ò—Å–ø—Ä–∞–≤–∏—Ç—å –≤—Ä–µ–º—è")
            edit_difficulty = types.KeyboardButton("üî¢ –ò—Å–ø—Ä–∞–≤–∏—Ç—å —Å–ª–æ–∂–Ω–æ—Å—Ç—å")
            markup.add(edit_name, edit_time, edit_difficulty)
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:", reply_markup=markup)
            bot.register_next_step_handler(message, lambda msg: confirmEdit(msg, bot, task, types))
        else:
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏.")
            displayTasks(message, bot, types)
    except ValueError:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä.")
        displayTasks(message, bot, types)

def confirmEdit(message, bot, task, types):
    if message.text == "‚úèÔ∏è –ò—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ":
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
        bot.register_next_step_handler(message, updateTaskName, bot, task, types)
    elif message.text == "‚è∞ –ò—Å–ø—Ä–∞–≤–∏—Ç—å –≤—Ä–µ–º—è":
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ (–≤ –º–∏–Ω—É—Ç–∞—Ö):")
        bot.register_next_step_handler(message, updateTaskTime, bot, task, types)
    elif message.text == "üî¢ –ò—Å–ø—Ä–∞–≤–∏—Ç—å —Å–ª–æ–∂–Ω–æ—Å—Ç—å":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button1 = types.KeyboardButton("1üëº")  
        button2 = types.KeyboardButton("2üôÇ")    
        button3 = types.KeyboardButton("3üò¢")    
        markup.add(button1, button2, button3)
        bot.send_message(message.chat.id, "–û—Ü–µ–Ω–∏—Ç–µ –Ω–æ–≤—É—é —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á–∏:", reply_markup=markup)
        bot.register_next_step_handler(message, lambda msg: updateTaskDifficulty(msg, bot, task, types))
    else:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
        displayTasks(message, bot, types)

def updateTaskTime(message, bot, task, types):
    user_id = message.chat.id
    try:
        time = int(message.text)
        if time >= 0:
            user_tasks[user_id][task]["time"] = time  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∑–∞–¥–∞—á–∏
            bot.send_message(message.chat.id, f"–í—Ä–µ–º—è –∑–∞–¥–∞—á–∏ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {time} –º–∏–Ω—É—Ç.")
            displayTasks(message, bot, types)
        else:
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –≤—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.")
            updateTaskTime(message, bot, task, types)
    except ValueError:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        updateTaskTime(message, bot, task, types)

def updateTaskName(message, bot, task, types):
    user_id = message.chat.id
    new_name = message.text
    user_tasks[user_id][new_name] = user_tasks[user_id].pop(task)  
    bot.send_message(message.chat.id, f"–ó–∞–¥–∞—á–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞ –≤ {new_name}.")
    displayTasks(message, bot, types)
    
def updateTaskDifficulty(message, bot, task, types):
    user_id = message.chat.id
    try:
        difficulty = int(message.text[0])  # –°–ª–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á–∏
        if difficulty in [1, 2, 3]:
            user_tasks[user_id][task]["difficulty"] = difficulty  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á–∏
            bot.send_message(message.chat.id, f"–°–ª–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á–∏ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {difficulty}.")
            displayTasks(message, bot, types)
        else:
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –æ—Ü–µ–Ω–∫—É —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ (1, 2 –∏–ª–∏ 3).")
            updateTaskDifficulty(message, bot, task, types)
    except ValueError:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        updateTaskDifficulty(message, bot, task, types)

def deleteTask(message, bot, types):
    user_id = message.chat.id
    try:
        task_number = int(message.text) - 1
        task_keys = list(user_tasks[user_id].keys())
        if 0 <= task_number < len(task_keys):
            task = task_keys[task_number]
            del user_tasks[user_id][task]  # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É
            bot.send_message(message.chat.id, f"–ó–∞–¥–∞—á–∞ '{task}' —É–¥–∞–ª–µ–Ω–∞.")
            displayTasks(message, bot, types)
        else:
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏.")
            displayTasks(message, bot, types)
    except ValueError:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä.")
        displayTasks(message, bot, types)


def howManyTaskShouldAddNow(message, bot, types):
    try:
        task_count = int(message.text)
        if 1 <= task_count <= 20:
            addTaskNow(message, bot, task_count, types)
        else:
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 20.")
            bot.register_next_step_handler(message, howManyTaskShouldAddNow, bot, types)
    except ValueError:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        bot.register_next_step_handler(message, howManyTaskShouldAddNow, bot, types)